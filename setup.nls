to setup ; sets up the initial environment
 ca
 reset-ticks
 resize-world 0 (330 * scale-modifier) 0 (210 * scale-modifier) set-patch-size (2 / scale-modifier) ; the closer to 1 the scale modifier is, the more accurate and the slower
 set-default-shape walls "square"
 set-default-shape exits "line"
 set-default-shape windows "line"
 set-default-shape fires "square"
  set-default-shape smoky "square"
  set-default-shape people "circle"
 read-building-from-file "building_nightclub.csv" 
 read-building-from-file-stamp "building_nightclub.csv"
 read-fire-from-file "fire_nightclub_merged.csv"
  read-smoke-from-file "smoke.csv"
 read-people-from-file "people.csv"
 ask people [ note-exits set color white set-speed-limit
    set leadership-quality 0 
    set-group-constant]
 ; set max-wall-distance (max [size] of walls) / 2
 set acceleration .081 ; taken from goal-oriented traffic simulation in model library
soclink
  ask exits [set color hsb  0  50 100]
 ask windows [set color hsb 80 50 100]
  ask fires [ set color [0 0 0 0 ] set size (10 * scale-modifier)]
  ask smoky [set color [0 0 0 0 ]]
  set-exit-appeal
 ;;there's initially no smoke
 ask patches [
    set father nobody
    set Cost-path 0
    set visited-patch? false
    set active? false
    if pcolor > 50 [set available false]]
  ;ask people [set distance-to-exits distance-to exits ]
end

to read-fire-from-file [ filename] ; reads in the fire from a CSV
  ;;header: x y time x for large canvas y for large canvas
  let values bf csv:from-file filename
  foreach values
  [ [row] ->
    create-fires 1; this means the fires are always there, and so the patch color is the only way to access where a fire is at a certain tick
    [
      setxy (item 3 row * scale-modifier) (item 4 row * scale-modifier)
      set arrival item 2 row
      set color blue
    ]
  ]
end

;to distance-to [items] ; attempt to record distance to exits/other group members at the start
;; ask person 610 [ask exits [show distance myself]] is operational code, just need to generalize
 ; ask items (distance myself)
;end

to read-building-from-file-stamp [filename]
  let values bf csv:from-file filename
  foreach values
  [[row] ->
    let breed-name item 0 row ; defines items
    if breed-name = "Wall"
   [create-walls 1 [setxy (item 5 row * scale-modifier)(item 6 row * scale-modifier) set size 1
      set second-end (list (item 7 row * scale-modifier) (item 8 row * scale-modifier))
     set color hsb  216 50 100
      while [distancexy (item 7 row * scale-modifier) (item 8 row * scale-modifier) > .5] [facexy (item 7 row * scale-modifier) (item 8 row * scale-modifier)  ask patch-here [set available false] stamp fd .3]]
  ]]
end

to read-building-from-file [filename] ; reads in the building from a CSV
  let values bf csv:from-file filename
  foreach values
  [ [row] ->
    let breed-name item 0 row ; defines items
    if breed-name = "Exit" [ create-exits 1 [set x1 (item 5 row * scale-modifier) set x2 (item 7 row * scale-modifier) set y1 (item 6 row * scale-modifier) set y2 (item 8 row * scale-modifier)
     setxy ((x1 + x2) / 2) (y1 + y2) / 2
   facexy x1 y1
    set size distancexy x1 y1 + distancexy x2 y2 ] ]
    if breed-name = "Window" [ create-windows 1 [set x1 (item 5 row * scale-modifier) set x2 (item 7 row * scale-modifier) set y1 (item 6 row * scale-modifier) set y2 (item 8 row * scale-modifier)
     setxy ((x1 + x2) / 2) (y1 + y2) / 2
   facexy x1 y1
    set size distancexy x1 y1 + distancexy x2 y2  ]]]
  ask exit 0 [set patch-past patch-at -1 0]
  ask exit 1 [set patch-past patch-at -1 0]
  ask exit 11 [set patch-past patch-at 0 -1]
  ask exit 2 [set patch-past patch-at 0 0]
end

to read-smoke-from-file [ filename] ; reads in the fire from a CSV
  ;;header: x y time smokelevel
  let values bf csv:from-file filename
  foreach values
  [ [row] ->
    create-smoky 1; this means the fires are always there, and so the patch color is the only way to access where a fire is at a certain tick
    [
      setxy (item 0 row * scale-modifier) (item 1 row * scale-modifier)
      set arrival item 2 row
      set level item 3 row
    set color white
    ]
  ]
end

to read-people-from-file [filename] ; information was encoded in a CSV based on interview data and organized by Database Codebook
  let rows bf csv:from-file filename
  foreach rows
  [[row] ->
    create-people 1
    [
      set size 5 * scale-modifier ; from Oberhagemann
     setxy (item 10 row * scale-modifier) (item 11 row * scale-modifier) ; initial position, randomized within an ecology that patrons had reported when interviewd
     set age (item 2 row)
     set gender (item 3 row)
     set visited? (item 4 row) ;true or false
     set group-number (item 6 row) ; people were assigned group numbers based on the people they came with
     set group-type (item 7 row) ; based on composition of group
     set energy (item 9 row) ;from Jieshi and Eric's work
  ]]
end

to soclink ;groups that came together have links based type of relationship
ask people [if group-type != 0 ;type 0 is 'alone'
 [
if group-type = 1 [ask other people with [group-number = [group-number] of myself] [create-coworker-with myself] set color 47]
if group-type = 2 [ask other people with [group-number = [group-number] of myself] [create-friend-with myself] set color 77]
if group-type = 3 [ask other people with [group-number = [group-number] of myself] [create-partner-with myself] set color 107]
if group-type = 4 [ask other people with [group-number = [group-number] of myself] [create-family-with myself] set color 137]
if group-type = 5 [ask other people with [group-number = [group-number] of myself] [create-multiple-with myself] set color 5]
 ]]
  ask links [hide-link]
end

to set-speed-limit ; how fast people can go
  ; units are m/s, from Isobe
  ask people [set speed-limit (11 * scale-modifier) + random-float (2 * scale-modifier)]
end

to set-exit-appeal
  ask exit 0 [set appeal (-30 * scale-modifier)]
  ask exit 2 [set appeal (70 * scale-modifier)] ; the bouncer discouraged people from using this exit
end
