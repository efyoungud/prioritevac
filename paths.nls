to set-path ; sets the path using a*
  set path A* patch-here goal
  set-next-desired-patch
end

to set-next-desired-patch
  ifelse path != false and length path > 1 ; if there's more than .1 meter between the agent and the goal
    [set next-desired-patch item 1 path]
    [set next-desired-patch goal]
  if next-desired-patch = (pcolor <= 50) [set-path] ; don't set the path if you're going to be walking straight into a wall
  if count people-here > 0 [stop]
  if count people in-radius 3 > 2 [stop] ; if it's too crowded, stop
  if next-desired-patch = (population > 1) [stop] 
end


to-report Total-expected-cost [#goal]
   report Cost-path  + heuristic #goal ; includes not just the number of steps that it will take but also the heuristic and the distance
end

to-report Heuristic [#goal]
  report (fh + distance #Goal) ; reports distance and also relative perceived danger
end

to-report A* [#Start #goal]
  let #valid-map patches with [available != false ] ;none of the blue patches
  ; clear all the information in the agents
  ask #valid-map with [visited-patch?]
  [
    set father nobody
    set Cost-path 0
    set visited-patch? false
    set active? false
  ]
  ; Activate the starting point to begin the searching loop
  ask #Start
  [
    set father self
    set visited-patch? true
    set active? true
  ]
  ; exists? indicates if in some instant of the search there are no options to
  ; continue. In this case, there is no path connecting #Start and #Goal
  let exists? true
  ; The searching loop is executed while we don't reach the #Goal and we think a path exists
  while [not [visited-patch?] of #goal and exists?]
  [
    ; We only work on the valid pacthes that are active
    let options #valid-map with [active?]
    ; If any
    ifelse any? options
    [
      ; Take one of the active patches with minimal expected cost
      ask min-one-of options [Total-expected-cost #goal]
      [
        ; Store its real cost (to reach it) to compute the real cost
        ; of its children
        let Cost-path-father Cost-path
        ; and deactivate it, because its children will be computed right now
        set active? false
        ; Compute its valid neighbors
        let valid-neighbors neighbors with [member? self #valid-map]
        ask valid-neighbors
        [
          let t ifelse-value visited-patch? [ Total-expected-cost #goal] [2 ^ 20]
          ; If this temporal cost is worse than the new one, we substitute the
          ; information in the patch to store the new one (with the neighbors
          ; of the first case, it will be always the case)
          if t > (Cost-path-father + distance myself + Heuristic #goal)
          [
            ; The current patch becomes the father of its neighbor in the new path
            set father myself
            set visited-patch? true
            set active? true
            ; and store the real cost in the neighbor from the real cost of its father
            set Cost-path Cost-path-father + distance father
            set Final-Cost Cost-path
          ]
        ]
      ]
    ]
    ; If there are no more options, there is no path between #Start and #Goal
    [
      set exists? false
    ]
  ]
  ; After the searching loop, if there exists a path
  ifelse exists?
  [
    ; We extract the list of patches in the path, form #Start to #Goal
    ; by jumping back from #Goal to #Start by using the fathers of every patch
    if #goal = nobody [preferreddirection]
    let current #goal
    set Final-Cost (precision [Cost-path] of #Goal 3)
    let rep (list current)
    While [current != #Start]
    [
      set current [father] of current
      set rep fput current rep
      if length rep > 1000 [error (word "The path seems way too big: " rep) ] ; if there's nowhere to go, reports that there's no path
    ]
    report rep
  ]
  [
    ; Otherwise, there is no path, and we return False
    report false
  ]
end
